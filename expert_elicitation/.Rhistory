#loop through all cores
age_depth_models  <- lapply(1:length(geocontrol.NE),function(x) x)
for(x in 1:length(geocontrol.NE)) { # does not complete 4, 21,  23,25,26,28,31,33,34,39,46,51,53,54,55,56
pdf(paste('~/workflow_stepps_prediction/age-depth/Bchron/plots/Bchron_plots_',x,'_.pdf',sep=''),height = 10, width = 10)
age.type.ind <- geocontrol.NE[[x]][[1]]$control.type #84,85, was strange (had multiple entries), 109,118,199 double entry for one depth
mean.age <- geocontrol.NE[[x]][[1]]$age
age.young <- geocontrol.NE[[x]][[1]]$age.young
age.old <- geocontrol.NE[[x]][[1]]$age.old
depth <- geocontrol.NE[[x]][[1]]$depth
thickness <- geocontrol.NE[[x]][[1]]$thickness
cal.curve <- rep('normal',length(age.type.ind))
cal.curve[grep('Radio',age.type.ind)] <-'intcal13'
#else intcal 13 doesn't work
cal.curve[mean.age<71] <- 'normal'
agesds <- (mean.age - age.young)/2
agesds <- replace(agesds,is.na(agesds),1)
#thickness[is.na(thickness)] <- 0
thickness <- rep(0,length(thickness))
predict.depth <- depth.NE[[x]]+1 #  quick fix to prevent code from falling over
input.data <- data.frame(mean.age = mean.age,agesds = agesds,depth = depth, thickness = thickness,
cal.curve = cal.curve)
input.data$agesds[input.data$agesds<1] <- 1 # code doesn't like age uncertainties of 0
input.data$agesds <- round(input.data$agesds)
input.data <- input.data[order(input.data$depth),]
#input.data <- input.data[input.data$mean.age>0,]
#remove pollen stratigraphic markers from the network
input.data <- input.data[(age.type.ind %in% pollen.age.constraint) ==FALSE,]
#remove NAs in depth
find.na <- !is.na(input.data$depth)
if(sum(find.na)!=length(find.na)) input.data <- input.data[find.na,]
find.na.age <- !is.na(input.data$mean.age)
if(sum(find.na.age)!=length(find.na.age)) input.data <- input.data[find.na.age,]
if(nrow(input.data)>1) {
chron.out <- Bchronology(ages = input.data$mean.age,ageSds = input.data$agesds,positions = input.data$depth,
positionThicknesses = input.data$thickness,calCurves = input.data$cal.curve,
predictPositions = predict.depth,iterations = 20000,burn = 4000,
ageScaleVal = 100, positionScaleVal = max(input.data$depth)/100)
#max(input.data$mean.age)/1000
plot(chron.out)
age_depth_models[[x]] <- chron.out
}
save.image('~/workflow_stepps_prediction/age-depth/Bchron/Bchron_age_depth_models.RData')
dev.off()
}
x
for(x in 10:length(geocontrol.NE)) { # does not complete 4, 21,  23,25,26,28,31,33,34,39,46,51,53,54,55,56
pdf(paste('~/workflow_stepps_prediction/age-depth/Bchron/plots/Bchron_plots_',x,'_.pdf',sep=''),height = 10, width = 10)
age.type.ind <- geocontrol.NE[[x]][[1]]$control.type #84,85, was strange (had multiple entries), 109,118,199 double entry for one depth
mean.age <- geocontrol.NE[[x]][[1]]$age
age.young <- geocontrol.NE[[x]][[1]]$age.young
age.old <- geocontrol.NE[[x]][[1]]$age.old
depth <- geocontrol.NE[[x]][[1]]$depth
thickness <- geocontrol.NE[[x]][[1]]$thickness
cal.curve <- rep('normal',length(age.type.ind))
cal.curve[grep('Radio',age.type.ind)] <-'intcal13'
#else intcal 13 doesn't work
cal.curve[mean.age<71] <- 'normal'
agesds <- (mean.age - age.young)/2
agesds <- replace(agesds,is.na(agesds),1)
#thickness[is.na(thickness)] <- 0
thickness <- rep(0,length(thickness))
predict.depth <- depth.NE[[x]]+1 #  quick fix to prevent code from falling over
input.data <- data.frame(mean.age = mean.age,agesds = agesds,depth = depth, thickness = thickness,
cal.curve = cal.curve)
input.data$agesds[input.data$agesds<1] <- 1 # code doesn't like age uncertainties of 0
input.data$agesds <- round(input.data$agesds)
input.data <- input.data[order(input.data$depth),]
#input.data <- input.data[input.data$mean.age>0,]
#remove pollen stratigraphic markers from the network
input.data <- input.data[(age.type.ind %in% pollen.age.constraint) ==FALSE,]
#remove NAs in depth
find.na <- !is.na(input.data$depth)
if(sum(find.na)!=length(find.na)) input.data <- input.data[find.na,]
find.na.age <- !is.na(input.data$mean.age)
if(sum(find.na.age)!=length(find.na.age)) input.data <- input.data[find.na.age,]
if(nrow(input.data)>1) {
chron.out <- Bchronology(ages = input.data$mean.age,ageSds = input.data$agesds,positions = input.data$depth,
positionThicknesses = input.data$thickness,calCurves = input.data$cal.curve,
predictPositions = predict.depth,iterations = 20000,burn = 4000,
ageScaleVal = 100, positionScaleVal = max(input.data$depth)/100)
#max(input.data$mean.age)/1000
plot(chron.out)
age_depth_models[[x]] <- chron.out
}
save.image('~/workflow_stepps_prediction/age-depth/Bchron/Bchron_age_depth_models.RData')
dev.off()
}
x
for(x in 11:length(geocontrol.NE)) { # does not complete 4, 21,  23,25,26,28,31,33,34,39,46,51,53,54,55,56
pdf(paste('~/workflow_stepps_prediction/age-depth/Bchron/plots/Bchron_plots_',x,'_.pdf',sep=''),height = 10, width = 10)
age.type.ind <- geocontrol.NE[[x]][[1]]$control.type #84,85, was strange (had multiple entries), 109,118,199 double entry for one depth
mean.age <- geocontrol.NE[[x]][[1]]$age
age.young <- geocontrol.NE[[x]][[1]]$age.young
age.old <- geocontrol.NE[[x]][[1]]$age.old
depth <- geocontrol.NE[[x]][[1]]$depth
thickness <- geocontrol.NE[[x]][[1]]$thickness
cal.curve <- rep('normal',length(age.type.ind))
cal.curve[grep('Radio',age.type.ind)] <-'intcal13'
#else intcal 13 doesn't work
cal.curve[mean.age<71] <- 'normal'
agesds <- (mean.age - age.young)/2
agesds <- replace(agesds,is.na(agesds),1)
#thickness[is.na(thickness)] <- 0
thickness <- rep(0,length(thickness))
predict.depth <- depth.NE[[x]]+1 #  quick fix to prevent code from falling over
input.data <- data.frame(mean.age = mean.age,agesds = agesds,depth = depth, thickness = thickness,
cal.curve = cal.curve)
input.data$agesds[input.data$agesds<1] <- 1 # code doesn't like age uncertainties of 0
input.data$agesds <- round(input.data$agesds)
input.data <- input.data[order(input.data$depth),]
#input.data <- input.data[input.data$mean.age>0,]
#remove pollen stratigraphic markers from the network
input.data <- input.data[(age.type.ind %in% pollen.age.constraint) ==FALSE,]
#remove NAs in depth
find.na <- !is.na(input.data$depth)
if(sum(find.na)!=length(find.na)) input.data <- input.data[find.na,]
find.na.age <- !is.na(input.data$mean.age)
if(sum(find.na.age)!=length(find.na.age)) input.data <- input.data[find.na.age,]
if(nrow(input.data)>1) {
chron.out <- Bchronology(ages = input.data$mean.age,ageSds = input.data$agesds,positions = input.data$depth,
positionThicknesses = input.data$thickness,calCurves = input.data$cal.curve,
predictPositions = predict.depth,iterations = 20000,burn = 4000,
ageScaleVal = 100, positionScaleVal = max(input.data$depth)/100)
#max(input.data$mean.age)/1000
plot(chron.out)
age_depth_models[[x]] <- chron.out
}
save.image('~/workflow_stepps_prediction/age-depth/Bchron/Bchron_age_depth_models.RData')
dev.off()
}
x
for(x in 11:length(geocontrol.NE)) { # does not complete 4, 21,  23,25,26,28,31,33,34,39,46,51,53,54,55,56
pdf(paste('~/workflow_stepps_prediction/age-depth/Bchron/plots/Bchron_plots_',x,'_.pdf',sep=''),height = 10, width = 10)
age.type.ind <- geocontrol.NE[[x]][[1]]$control.type #84,85, was strange (had multiple entries), 109,118,199 double entry for one depth
mean.age <- geocontrol.NE[[x]][[1]]$age
age.young <- geocontrol.NE[[x]][[1]]$age.young
age.old <- geocontrol.NE[[x]][[1]]$age.old
depth <- geocontrol.NE[[x]][[1]]$depth
thickness <- geocontrol.NE[[x]][[1]]$thickness
cal.curve <- rep('normal',length(age.type.ind))
cal.curve[grep('Radio',age.type.ind)] <-'intcal13'
#else intcal 13 doesn't work
cal.curve[mean.age<71] <- 'normal'
agesds <- (mean.age - age.young)/2
agesds <- replace(agesds,is.na(agesds),1)
#thickness[is.na(thickness)] <- 0
thickness <- rep(0,length(thickness))
predict.depth <- depth.NE[[x]]+1 #  quick fix to prevent code from falling over
input.data <- data.frame(mean.age = mean.age,agesds = agesds,depth = depth, thickness = thickness,
cal.curve = cal.curve)
input.data$agesds[input.data$agesds<1] <- 1 # code doesn't like age uncertainties of 0
input.data$agesds <- round(input.data$agesds)
input.data <- input.data[order(input.data$depth),]
#input.data <- input.data[input.data$mean.age>0,]
#remove pollen stratigraphic markers from the network
input.data <- input.data[(age.type.ind %in% pollen.age.constraint) ==FALSE,]
#remove NAs in depth
find.na <- !is.na(input.data$depth)
if(sum(find.na)!=length(find.na)) input.data <- input.data[find.na,]
find.na.age <- !is.na(input.data$mean.age)
if(sum(find.na.age)!=length(find.na.age)) input.data <- input.data[find.na.age,]
if(nrow(input.data)>1) {
chron.out <- Bchronology(ages = input.data$mean.age,ageSds = input.data$agesds,positions = input.data$depth,
positionThicknesses = input.data$thickness,calCurves = input.data$cal.curve,
predictPositions = predict.depth,iterations = 20000,burn = 4000,
ageScaleVal = 100, positionScaleVal = max(input.data$depth)/100)
#max(input.data$mean.age)/1000
plot(chron.out)
age_depth_models[[x]] <- chron.out
}
save.image('~/workflow_stepps_prediction/age-depth/Bchron/Bchron_age_depth_models.RData')
dev.off()
}
x
input.data
for(x in 1:length(geocontrol.NE)) { # does not complete 4, 21,  23,25,26,28,31,33,34,39,46,51,53,54,55,56
pdf(paste('~/workflow_stepps_prediction/age-depth/Bchron/plots/Bchron_plots_',x,'_.pdf',sep=''),height = 10, width = 10)
age.type.ind <- geocontrol.NE[[x]][[1]]$control.type #84,85, was strange (had multiple entries), 109,118,199 double entry for one depth
mean.age <- geocontrol.NE[[x]][[1]]$age
age.young <- geocontrol.NE[[x]][[1]]$age.young
age.old <- geocontrol.NE[[x]][[1]]$age.old
depth <- geocontrol.NE[[x]][[1]]$depth
thickness <- geocontrol.NE[[x]][[1]]$thickness
cal.curve <- rep('normal',length(age.type.ind))
cal.curve[grep('Radio',age.type.ind)] <-'intcal13'
#else intcal 13 doesn't work
cal.curve[mean.age<71] <- 'normal'
agesds <- (mean.age - age.young)/2
agesds <- replace(agesds,is.na(agesds),1)
#thickness[is.na(thickness)] <- 0
thickness <- rep(0,length(thickness))
predict.depth <- depth.NE[[x]]+1 #  quick fix to prevent code from falling over
input.data <- data.frame(mean.age = mean.age,agesds = agesds,depth = depth, thickness = thickness,
cal.curve = cal.curve)
input.data$agesds[input.data$agesds<1] <- 1 # code doesn't like age uncertainties of 0
input.data$agesds <- round(input.data$agesds)
input.data <- input.data[order(input.data$depth),]
#input.data <- input.data[input.data$mean.age>0,]
#remove pollen stratigraphic markers from the network
input.data <- input.data[(age.type.ind %in% pollen.age.constraint) ==FALSE,]
#remove NAs in depth
find.na <- !is.na(input.data$depth)
if(sum(find.na)!=length(find.na)) input.data <- input.data[find.na,]
find.na.age <- !is.na(input.data$mean.age)
if(sum(find.na.age)!=length(find.na.age)) input.data <- input.data[find.na.age,]
if(nrow(input.data)>2) {
chron.out <- Bchronology(ages = input.data$mean.age,ageSds = input.data$agesds,positions = input.data$depth,
positionThicknesses = input.data$thickness,calCurves = input.data$cal.curve,
predictPositions = predict.depth,iterations = 20000,burn = 4000,
ageScaleVal = 100, positionScaleVal = max(input.data$depth)/100)
#max(input.data$mean.age)/1000
plot(chron.out)
age_depth_models[[x]] <- chron.out
}
save.image('~/workflow_stepps_prediction/age-depth/Bchron/Bchron_age_depth_models.RData')
dev.off()
}
x
for(x in 17:length(geocontrol.NE)) { # does not complete 4, 21,  23,25,26,28,31,33,34,39,46,51,53,54,55,56
pdf(paste('~/workflow_stepps_prediction/age-depth/Bchron/plots/Bchron_plots_',x,'_.pdf',sep=''),height = 10, width = 10)
age.type.ind <- geocontrol.NE[[x]][[1]]$control.type #84,85, was strange (had multiple entries), 109,118,199 double entry for one depth
mean.age <- geocontrol.NE[[x]][[1]]$age
age.young <- geocontrol.NE[[x]][[1]]$age.young
age.old <- geocontrol.NE[[x]][[1]]$age.old
depth <- geocontrol.NE[[x]][[1]]$depth
thickness <- geocontrol.NE[[x]][[1]]$thickness
cal.curve <- rep('normal',length(age.type.ind))
cal.curve[grep('Radio',age.type.ind)] <-'intcal13'
#else intcal 13 doesn't work
cal.curve[mean.age<71] <- 'normal'
agesds <- (mean.age - age.young)/2
agesds <- replace(agesds,is.na(agesds),1)
#thickness[is.na(thickness)] <- 0
thickness <- rep(0,length(thickness))
predict.depth <- depth.NE[[x]]+1 #  quick fix to prevent code from falling over
input.data <- data.frame(mean.age = mean.age,agesds = agesds,depth = depth, thickness = thickness,
cal.curve = cal.curve)
input.data$agesds[input.data$agesds<1] <- 1 # code doesn't like age uncertainties of 0
input.data$agesds <- round(input.data$agesds)
input.data <- input.data[order(input.data$depth),]
#input.data <- input.data[input.data$mean.age>0,]
#remove pollen stratigraphic markers from the network
input.data <- input.data[(age.type.ind %in% pollen.age.constraint) ==FALSE,]
#remove NAs in depth
find.na <- !is.na(input.data$depth)
if(sum(find.na)!=length(find.na)) input.data <- input.data[find.na,]
find.na.age <- !is.na(input.data$mean.age)
if(sum(find.na.age)!=length(find.na.age)) input.data <- input.data[find.na.age,]
if(nrow(input.data)>2) {
chron.out <- Bchronology(ages = input.data$mean.age,ageSds = input.data$agesds,positions = input.data$depth,
positionThicknesses = input.data$thickness,calCurves = input.data$cal.curve,
predictPositions = predict.depth,iterations = 20000,burn = 4000,
ageScaleVal = 100, positionScaleVal = max(input.data$depth)/100)
#max(input.data$mean.age)/1000
plot(chron.out)
age_depth_models[[x]] <- chron.out
}
save.image('~/workflow_stepps_prediction/age-depth/Bchron/Bchron_age_depth_models.RData')
dev.off()
}
for(x in 1:length(geocontrol.NE)) { # does not complete 4, 21,  23,25,26,28,31,33,34,39,46,51,53,54,55,56
pdf(paste('~/workflow_stepps_prediction/age-depth/Bchron/plots/Bchron_plots_',x,'.pdf',sep=''),height = 10, width = 10)
age.type.ind <- geocontrol.NE[[x]][[1]]$control.type #84,85, was strange (had multiple entries), 109,118,199 double entry for one depth
mean.age <- geocontrol.NE[[x]][[1]]$age
age.young <- geocontrol.NE[[x]][[1]]$age.young
age.old <- geocontrol.NE[[x]][[1]]$age.old
depth <- geocontrol.NE[[x]][[1]]$depth
thickness <- geocontrol.NE[[x]][[1]]$thickness
cal.curve <- rep('normal',length(age.type.ind))
cal.curve[grep('Radio',age.type.ind)] <-'intcal13'
#else intcal 13 doesn't work
cal.curve[mean.age<71] <- 'normal'
agesds <- (mean.age - age.young)/2
agesds <- replace(agesds,is.na(agesds),1)
#thickness[is.na(thickness)] <- 0
thickness <- rep(0,length(thickness))
predict.depth <- depth.NE[[x]]+1 #  quick fix to prevent code from falling over
input.data <- data.frame(mean.age = mean.age,agesds = agesds,depth = depth, thickness = thickness,
cal.curve = cal.curve)
input.data$agesds[input.data$agesds<1] <- 1 # code doesn't like age uncertainties of 0
input.data$agesds <- round(input.data$agesds)
input.data <- input.data[order(input.data$depth),]
#input.data <- input.data[input.data$mean.age>0,]
#remove pollen stratigraphic markers from the network
input.data <- input.data[(age.type.ind %in% pollen.age.constraint) ==FALSE,]
#remove NAs in depth
find.na <- !is.na(input.data$depth)
if(sum(find.na)!=length(find.na)) input.data <- input.data[find.na,]
find.na.age <- !is.na(input.data$mean.age)
if(sum(find.na.age)!=length(find.na.age)) input.data <- input.data[find.na.age,]
if(nrow(input.data)>2) {
chron.out <- Bchronology(ages = input.data$mean.age,ageSds = input.data$agesds,positions = input.data$depth,
positionThicknesses = input.data$thickness,calCurves = input.data$cal.curve,
predictPositions = predict.depth,iterations = 20000,burn = 4000,
ageScaleVal = 100, positionScaleVal = max(input.data$depth)/100)
#max(input.data$mean.age)/1000
plot(chron.out)
age_depth_models[[x]] <- chron.out
}
save.image('~/workflow_stepps_prediction/age-depth/Bchron/Bchron_age_depth_models.RData')
dev.off()
}
x
for(x in 22:length(geocontrol.NE)) { # does not complete 4, 21,  23,25,26,28,31,33,34,39,46,51,53,54,55,56
pdf(paste('~/workflow_stepps_prediction/age-depth/Bchron/plots/Bchron_plots_',x,'.pdf',sep=''),height = 10, width = 10)
age.type.ind <- geocontrol.NE[[x]][[1]]$control.type #84,85, was strange (had multiple entries), 109,118,199 double entry for one depth
mean.age <- geocontrol.NE[[x]][[1]]$age
age.young <- geocontrol.NE[[x]][[1]]$age.young
age.old <- geocontrol.NE[[x]][[1]]$age.old
depth <- geocontrol.NE[[x]][[1]]$depth
thickness <- geocontrol.NE[[x]][[1]]$thickness
cal.curve <- rep('normal',length(age.type.ind))
cal.curve[grep('Radio',age.type.ind)] <-'intcal13'
#else intcal 13 doesn't work
cal.curve[mean.age<71] <- 'normal'
agesds <- (mean.age - age.young)/2
agesds <- replace(agesds,is.na(agesds),1)
#thickness[is.na(thickness)] <- 0
thickness <- rep(0,length(thickness))
predict.depth <- depth.NE[[x]]+1 #  quick fix to prevent code from falling over
input.data <- data.frame(mean.age = mean.age,agesds = agesds,depth = depth, thickness = thickness,
cal.curve = cal.curve)
input.data$agesds[input.data$agesds<1] <- 1 # code doesn't like age uncertainties of 0
input.data$agesds <- round(input.data$agesds)
input.data <- input.data[order(input.data$depth),]
#input.data <- input.data[input.data$mean.age>0,]
#remove pollen stratigraphic markers from the network
input.data <- input.data[(age.type.ind %in% pollen.age.constraint) ==FALSE,]
#remove NAs in depth
find.na <- !is.na(input.data$depth)
if(sum(find.na)!=length(find.na)) input.data <- input.data[find.na,]
find.na.age <- !is.na(input.data$mean.age)
if(sum(find.na.age)!=length(find.na.age)) input.data <- input.data[find.na.age,]
if(nrow(input.data)>2) {
chron.out <- Bchronology(ages = input.data$mean.age,ageSds = input.data$agesds,positions = input.data$depth,
positionThicknesses = input.data$thickness,calCurves = input.data$cal.curve,
predictPositions = predict.depth,iterations = 20000,burn = 4000,
ageScaleVal = 100, positionScaleVal = max(input.data$depth)/100)
#max(input.data$mean.age)/1000
plot(chron.out)
age_depth_models[[x]] <- chron.out
}
save.image('~/workflow_stepps_prediction/age-depth/Bchron/Bchron_age_depth_models.RData')
dev.off()
}
x
for(x in 33:length(geocontrol.NE)) { # does not complete 4, 21,  23,25,26,28,31,33,34,39,46,51,53,54,55,56
pdf(paste('~/workflow_stepps_prediction/age-depth/Bchron/plots/Bchron_plots_',x,'.pdf',sep=''),height = 10, width = 10)
age.type.ind <- geocontrol.NE[[x]][[1]]$control.type #84,85, was strange (had multiple entries), 109,118,199 double entry for one depth
mean.age <- geocontrol.NE[[x]][[1]]$age
age.young <- geocontrol.NE[[x]][[1]]$age.young
age.old <- geocontrol.NE[[x]][[1]]$age.old
depth <- geocontrol.NE[[x]][[1]]$depth
thickness <- geocontrol.NE[[x]][[1]]$thickness
cal.curve <- rep('normal',length(age.type.ind))
cal.curve[grep('Radio',age.type.ind)] <-'intcal13'
#else intcal 13 doesn't work
cal.curve[mean.age<71] <- 'normal'
agesds <- (mean.age - age.young)/2
agesds <- replace(agesds,is.na(agesds),1)
#thickness[is.na(thickness)] <- 0
thickness <- rep(0,length(thickness))
predict.depth <- depth.NE[[x]]+1 #  quick fix to prevent code from falling over
input.data <- data.frame(mean.age = mean.age,agesds = agesds,depth = depth, thickness = thickness,
cal.curve = cal.curve)
input.data$agesds[input.data$agesds<1] <- 1 # code doesn't like age uncertainties of 0
input.data$agesds <- round(input.data$agesds)
input.data <- input.data[order(input.data$depth),]
#input.data <- input.data[input.data$mean.age>0,]
#remove pollen stratigraphic markers from the network
input.data <- input.data[(age.type.ind %in% pollen.age.constraint) ==FALSE,]
#remove NAs in depth
find.na <- !is.na(input.data$depth)
if(sum(find.na)!=length(find.na)) input.data <- input.data[find.na,]
find.na.age <- !is.na(input.data$mean.age)
if(sum(find.na.age)!=length(find.na.age)) input.data <- input.data[find.na.age,]
if(nrow(input.data)>2) {
chron.out <- Bchronology(ages = input.data$mean.age,ageSds = input.data$agesds,positions = input.data$depth,
positionThicknesses = input.data$thickness,calCurves = input.data$cal.curve,
predictPositions = predict.depth,iterations = 20000,burn = 4000,
ageScaleVal = 100, positionScaleVal = max(input.data$depth)/100)
#max(input.data$mean.age)/1000
plot(chron.out)
age_depth_models[[x]] <- chron.out
}
save.image('~/workflow_stepps_prediction/age-depth/Bchron/Bchron_age_depth_models.RData')
dev.off()
}
x
for(x in 50:length(geocontrol.NE)) { # does not complete 4, 21,  23,25,26,28,31,33,34,39,46,51,53,54,55,56
pdf(paste('~/workflow_stepps_prediction/age-depth/Bchron/plots/Bchron_plots_',x,'.pdf',sep=''),height = 10, width = 10)
age.type.ind <- geocontrol.NE[[x]][[1]]$control.type #84,85, was strange (had multiple entries), 109,118,199 double entry for one depth
mean.age <- geocontrol.NE[[x]][[1]]$age
age.young <- geocontrol.NE[[x]][[1]]$age.young
age.old <- geocontrol.NE[[x]][[1]]$age.old
depth <- geocontrol.NE[[x]][[1]]$depth
thickness <- geocontrol.NE[[x]][[1]]$thickness
cal.curve <- rep('normal',length(age.type.ind))
cal.curve[grep('Radio',age.type.ind)] <-'intcal13'
#else intcal 13 doesn't work
cal.curve[mean.age<71] <- 'normal'
agesds <- (mean.age - age.young)/2
agesds <- replace(agesds,is.na(agesds),1)
#thickness[is.na(thickness)] <- 0
thickness <- rep(0,length(thickness))
predict.depth <- depth.NE[[x]]+1 #  quick fix to prevent code from falling over
input.data <- data.frame(mean.age = mean.age,agesds = agesds,depth = depth, thickness = thickness,
cal.curve = cal.curve)
input.data$agesds[input.data$agesds<1] <- 1 # code doesn't like age uncertainties of 0
input.data$agesds <- round(input.data$agesds)
input.data <- input.data[order(input.data$depth),]
#input.data <- input.data[input.data$mean.age>0,]
#remove pollen stratigraphic markers from the network
input.data <- input.data[(age.type.ind %in% pollen.age.constraint) ==FALSE,]
#remove NAs in depth
find.na <- !is.na(input.data$depth)
if(sum(find.na)!=length(find.na)) input.data <- input.data[find.na,]
find.na.age <- !is.na(input.data$mean.age)
if(sum(find.na.age)!=length(find.na.age)) input.data <- input.data[find.na.age,]
if(nrow(input.data)>2) {
chron.out <- Bchronology(ages = input.data$mean.age,ageSds = input.data$agesds,positions = input.data$depth,
positionThicknesses = input.data$thickness,calCurves = input.data$cal.curve,
predictPositions = predict.depth,iterations = 20000,burn = 4000,
ageScaleVal = 100, positionScaleVal = max(input.data$depth)/100)
#max(input.data$mean.age)/1000
plot(chron.out)
age_depth_models[[x]] <- chron.out
}
save.image('~/workflow_stepps_prediction/age-depth/Bchron/Bchron_age_depth_models.RData')
dev.off()
}
?Bchronology
x
for(x in 85:length(geocontrol.NE)) { # does not complete 4, 21,  23,25,26,28,31,33,34,39,46,51,53,54,55,56
pdf(paste('~/workflow_stepps_prediction/age-depth/Bchron/plots/Bchron_plots_',x,'.pdf',sep=''),height = 10, width = 10)
age.type.ind <- geocontrol.NE[[x]][[1]]$control.type #84,85, was strange (had multiple entries), 109,118,199 double entry for one depth
mean.age <- geocontrol.NE[[x]][[1]]$age
age.young <- geocontrol.NE[[x]][[1]]$age.young
age.old <- geocontrol.NE[[x]][[1]]$age.old
depth <- geocontrol.NE[[x]][[1]]$depth
thickness <- geocontrol.NE[[x]][[1]]$thickness
cal.curve <- rep('normal',length(age.type.ind))
cal.curve[grep('Radio',age.type.ind)] <-'intcal13'
#else intcal 13 doesn't work
cal.curve[mean.age<71] <- 'normal'
agesds <- (mean.age - age.young)/2
agesds <- replace(agesds,is.na(agesds),1)
#thickness[is.na(thickness)] <- 0
thickness <- rep(0,length(thickness))
predict.depth <- depth.NE[[x]]+1 #  quick fix to prevent code from falling over
input.data <- data.frame(mean.age = mean.age,agesds = agesds,depth = depth, thickness = thickness,
cal.curve = cal.curve)
input.data$agesds[input.data$agesds<1] <- 1 # code doesn't like age uncertainties of 0
input.data$agesds <- round(input.data$agesds)
input.data <- input.data[order(input.data$depth),]
#input.data <- input.data[input.data$mean.age>0,]
#remove pollen stratigraphic markers from the network
input.data <- input.data[(age.type.ind %in% pollen.age.constraint) ==FALSE,]
#remove NAs in depth
find.na <- !is.na(input.data$depth)
if(sum(find.na)!=length(find.na)) input.data <- input.data[find.na,]
find.na.age <- !is.na(input.data$mean.age)
if(sum(find.na.age)!=length(find.na.age)) input.data <- input.data[find.na.age,]
if(nrow(input.data)>2) {
chron.out <- Bchronology(ages = input.data$mean.age,ageSds = input.data$agesds,positions = input.data$depth,
positionThicknesses = input.data$thickness,calCurves = input.data$cal.curve,
predictPositions = predict.depth,iterations = 20000,burn = 4000,
ageScaleVal = 100, positionScaleVal = max(input.data$depth)/100,jitterPositions = TRUE)
#max(input.data$mean.age)/1000
plot(chron.out)
age_depth_models[[x]] <- chron.out
}
save.image('~/workflow_stepps_prediction/age-depth/Bchron/Bchron_age_depth_models.RData')
dev.off()
}
library(neotoma) #1.7
library(analogue)#0.17-0
library(rioja)#0.9-15
library(maps)#3.2.0
#---------------------------------------------------------------------------------------------------------------
#set working directory and location of helper files
setwd('~/workflow_stepps_calibration/expert_elicitation/')
help.fun.loc <- 'elicitation_helper_funs/'
data.loc <- 'data/'
plot.loc <- 'plots/'
#---------------------------------------------------------------------------------------------------------------
# make map of the area
map(database = 'state')
abline(h = c(39.75,47.5),col=4)
abline(v = c(-85,-67),col=4)
#---------------------------------------------------------------------------------------------------------------
#this is a serious attempt to load data from the North eastern US for the time period 350 to 650 cal BP
#---------------------------------------------------------------------------------------------------------------
#first the brackeeting ages are defined, we only consider cores that have data in this time period
older.age <- 4000
younger.age <- -70
#what is this
get_table('GeoPoliticalUnits')
#load fossil data for NEUS (given by coordinates in loc )
new_england_fossil <- get_dataset(datasettype = 'pollen',
loc=c(-85,39.75,-67,47.55)) #also contains data from Canada
#returns a long list now we are only looking for the dataset ID
#use Andria Dawson's Code to find indexes that are in New England (have to change place and name of this code)
source(paste(help.fun.loc,'/get_meta_data.R',sep=''))
meta.data.neus$datasetID
length(meta.data.neus$datasetID)
#returns a long list now we are only looking for the dataset ID
#use Andria Dawson's Code to find indexes that are in New England (have to change place and name of this code)
source(paste(help.fun.loc,'/get_meta_data.R',sep=''))
#returns a long list now we are only looking for the dataset ID
#use Andria Dawson's Code to find indexes that are in New England (have to change place and name of this code)
source(paste(help.fun.loc,'/get_meta_data.R',sep=''))
